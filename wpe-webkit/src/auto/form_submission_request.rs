// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "WebKitFormSubmissionRequest")]
    pub struct FormSubmissionRequest(Object<ffi::WebKitFormSubmissionRequest, ffi::WebKitFormSubmissionRequestClass>);

    match fn {
        type_ => || ffi::webkit_form_submission_request_get_type(),
    }
}

impl FormSubmissionRequest {
    pub const NONE: Option<&'static FormSubmissionRequest> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::FormSubmissionRequest>> Sealed for T {}
}

pub trait FormSubmissionRequestExt: IsA<FormSubmissionRequest> + sealed::Sealed + 'static {
    #[doc(alias = "webkit_form_submission_request_list_text_fields")]
    fn list_text_fields(&self) -> Option<(Vec<glib::GString>, Vec<glib::GString>)> {
        unsafe {
            let mut field_names = std::ptr::null_mut();
            let mut field_values = std::ptr::null_mut();
            let ret = from_glib(ffi::webkit_form_submission_request_list_text_fields(
                self.as_ref().to_glib_none().0,
                &mut field_names,
                &mut field_values,
            ));
            if ret {
                Some((
                    FromGlibPtrContainer::from_glib_none(field_names),
                    FromGlibPtrContainer::from_glib_none(field_values),
                ))
            } else {
                None
            }
        }
    }

    #[doc(alias = "webkit_form_submission_request_submit")]
    fn submit(&self) {
        unsafe {
            ffi::webkit_form_submission_request_submit(self.as_ref().to_glib_none().0);
        }
    }
}

impl<O: IsA<FormSubmissionRequest>> FormSubmissionRequestExt for O {}
