/* automatically generated by rust-bindgen 0.69.4 */

#![allow(warnings)]

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const WPE_FDO_MAJOR_VERSION: u32 = 1;
pub const WPE_FDO_MINOR_VERSION: u32 = 14;
pub const WPE_FDO_MICRO_VERSION: u32 = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_fdo_shm_exported_buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wl_shm_buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wpe_fdo_shm_exported_buffer_get_resource(
        arg1: *mut wpe_fdo_shm_exported_buffer,
    ) -> *mut wl_resource;
}
extern "C" {
    pub fn wpe_fdo_shm_exported_buffer_get_shm_buffer(
        arg1: *mut wpe_fdo_shm_exported_buffer,
    ) -> *mut wl_shm_buffer;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type EGLImageKHR = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_fdo_egl_exported_image {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wpe_fdo_egl_exported_image_get_width(arg1: *mut wpe_fdo_egl_exported_image) -> u32;
}
extern "C" {
    pub fn wpe_fdo_egl_exported_image_get_height(arg1: *mut wpe_fdo_egl_exported_image) -> u32;
}
extern "C" {
    pub fn wpe_fdo_egl_exported_image_get_egl_image(
        arg1: *mut wpe_fdo_egl_exported_image,
    ) -> EGLImageKHR;
}
pub type EGLDisplay = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn wpe_fdo_initialize_for_egl_display(arg1: EGLDisplay) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_exportable_fdo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_exportable_fdo_egl_client {
    pub export_egl_image: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, image: EGLImageKHR),
    >,
    pub export_fdo_egl_image: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            image: *mut wpe_fdo_egl_exported_image,
        ),
    >,
    pub export_shm_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            buffer: *mut wpe_fdo_shm_exported_buffer,
        ),
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_exportable_fdo_egl_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_exportable_fdo_egl_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_exportable_fdo_egl_client>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_exportable_fdo_egl_client>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_egl_image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client),
            "::",
            stringify!(export_egl_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_fdo_egl_image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client),
            "::",
            stringify!(export_fdo_egl_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_shm_buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client),
            "::",
            stringify!(export_shm_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_egl_client),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_egl_create(
        arg1: *const wpe_view_backend_exportable_fdo_egl_client,
        arg2: *mut ::std::os::raw::c_void,
        width: u32,
        height: u32,
    ) -> *mut wpe_view_backend_exportable_fdo;
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_egl_dispatch_release_image(
        exportable: *mut wpe_view_backend_exportable_fdo,
        image: EGLImageKHR,
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_egl_dispatch_release_exported_image(
        arg1: *mut wpe_view_backend_exportable_fdo,
        arg2: *mut wpe_fdo_egl_exported_image,
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_egl_dispatch_release_shm_exported_buffer(
        arg1: *mut wpe_view_backend_exportable_fdo,
        arg2: *mut wpe_fdo_shm_exported_buffer,
    );
}
extern "C" {
    #[doc = " wpe_fdo_get_major_version:\n\n Returns: Major version of the `WPEBackend-fdo` library."]
    pub fn wpe_fdo_get_major_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " wpe_fdo_get_minor_version:\n\n Returns: Minor version of the `WPEBackend-fdo` library."]
    pub fn wpe_fdo_get_minor_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " wpe_fdo_get_micro_version:\n\n Returns: Micro version of the `WPEBackend-fdo` library."]
    pub fn wpe_fdo_get_micro_version() -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_exportable_fdo_dmabuf_resource {
    pub buffer_resource: *mut wl_resource,
    pub width: u32,
    pub height: u32,
    pub format: u32,
    pub n_planes: u8,
    pub fds: [::std::os::raw::c_int; 4usize],
    pub strides: [u32; 4usize],
    pub offsets: [u32; 4usize],
    pub modifiers: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_wpe_view_backend_exportable_fdo_dmabuf_resource() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_exportable_fdo_dmabuf_resource> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_exportable_fdo_dmabuf_resource>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_exportable_fdo_dmabuf_resource>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(buffer_resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_planes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(n_planes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strides) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offsets) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_dmabuf_resource),
            "::",
            stringify!(modifiers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_exportable_fdo_client {
    pub export_buffer_resource: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, buffer_resource: *mut wl_resource),
    >,
    pub export_dmabuf_resource: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            dmabuf_resource: *mut wpe_view_backend_exportable_fdo_dmabuf_resource,
        ),
    >,
    pub export_shm_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            arg1: *mut wpe_fdo_shm_exported_buffer,
        ),
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_exportable_fdo_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_exportable_fdo_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_exportable_fdo_client>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(wpe_view_backend_exportable_fdo_client)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_exportable_fdo_client>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(wpe_view_backend_exportable_fdo_client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_buffer_resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_client),
            "::",
            stringify!(export_buffer_resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_dmabuf_resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_client),
            "::",
            stringify!(export_dmabuf_resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_shm_buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_client),
            "::",
            stringify!(export_shm_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_client),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_exportable_fdo_client),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_create(
        arg1: *const wpe_view_backend_exportable_fdo_client,
        arg2: *mut ::std::os::raw::c_void,
        width: u32,
        height: u32,
    ) -> *mut wpe_view_backend_exportable_fdo;
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_destroy(arg1: *mut wpe_view_backend_exportable_fdo);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_get_view_backend(
        arg1: *mut wpe_view_backend_exportable_fdo,
    ) -> *mut wpe_view_backend;
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_dispatch_frame_complete(
        arg1: *mut wpe_view_backend_exportable_fdo,
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_dispatch_release_buffer(
        arg1: *mut wpe_view_backend_exportable_fdo,
        arg2: *mut wl_resource,
    );
}
extern "C" {
    pub fn wpe_view_backend_exportable_fdo_dispatch_release_shm_exported_buffer(
        arg1: *mut wpe_view_backend_exportable_fdo,
        arg2: *mut wpe_fdo_shm_exported_buffer,
    );
}
